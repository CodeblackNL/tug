## At our disposal we have access to several contextual variables
##  [Tug.Server.Providers.PsLogger]$handlerLogger -
##    provides a logging object specific to the handler cmdlets
##    (this is a PS-friendly instance of the ILogger interface)
##
##  [Microsoft.Extensions.Configuration.IConfiguration]$handlerAppConfiguration -
##    this provides read-only access to the resolved application-wide configuration
##
##  [Tug.Server.Provider.Ps5DscHandlercontext]$handlerContext -
##    TODO:  NOT IMPLEMENTED YET

$handlerLogger.LogInformation("Loading BASIC Tug Cmdlets...")
$handlerLogger.LogInformation("Got Config:  $handlerAppConfiguration")

function Register-TugNode {
    $handlerLogger.LogInformation("REGISTER:")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))

    ## Return:
    ##    SUCCESS:  n/a
    ##    FAILURE:  throw an exception
}

function Get-TugNodeAction {
    $handlerLogger.LogInformation("GET-ACTION")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))


    ## Return:
    ##    SUCCESS:  return an instance of [Tug.Server.ActionStatus]
    ##    FAILURE:  throw an exception

    $status = [Tug.Server.ActionStatus]@{
        NodeStatus = "GetConfiguration" ## "OK" ## 
        ConfigurationStatuses = [Tug.Model.ActionDetailsItem[]]@(
            [Tug.Model.ActionDetailsItem]@{
                ConfigurationName = "foobar"
                Status = "GetConfiguration" ## "OK" ## 
            }
        )
    }
    
    $handlerLogger.LogInformation("Returning status: $($status.GetType().FullName)")
    return $status
}

function Get-TugNodeConfiguration {
    $handlerLogger.LogInformation("GET-CONFIGURATION")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))

    ## Return:
    ##    SUCCESS:  return an instance of [Tug.Server.FileContent]
    ##    FAILURE:  throw an exception

    $foobarConfig = Build-SimpleMof
    $foobarConfigBytes = [System.Text.Encoding]::UTF8.GetBytes($foobarConfig)
    $sha256 = [System.Security.Cryptography.SHA256]::Create()
    $checksumBytes = $sha256.ComputeHash($foobarConfigBytes)
    $checksum = [System.BitConverter]::ToString($checksumBytes).Replace("-", "")
    $sha256.Dispose()

    return [Tug.Server.FileContent]@{
        ChecksumAlgorithm = "SHA-256"
        Checksum = $checksum
        Content = (New-Object System.IO.MemoryStream(,$foobarConfigBytes))
    }
}

function Get-TugModule {
    $handlerLogger.LogInformation("GET-MODULE")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))

    throw "NOT IMPLEMENTED"
}

function New-TugNodeReport {
    $handlerLogger.LogInformation("NEW-REPORT")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))

    throw "NOT IMPLEMENTED"
}

function Get-TugNodeReports {
    $handlerLogger.LogInformation("GET-REPORTS")
    $handlerLogger.LogInformation(($args | ConvertTo-Json -Depth 3))

    throw "NOT IMPLEMENTED"
}


function Build-SimpleMof {
    param(
        [string]$NodeName="StaticTestConfig",
        [string]$TempDirName="c:\\temp",
        [string]$TempFileName="c:\\temp\\dsc-statictestconfig-file.txt",
        [string]$TempFileContent=$null
    )
    $mofCreatedOn = $env:COMPUTERNAME
    $mofCreatedBy = $env:USERNAME
    $mofCreatedAt = [DateTime]::Now.ToString('MM/dd/yyyy hh:mm:ss')

    if (-not $TempFileContent) {
        $TempFileContent = "THIS FILE GENERATED BY TUG PS5 DSC CONFIGURATION [$NodeName] @ [$mofCreatedAt]"
    }

    @"
/*
@TargetNode='$NodeName'
@GeneratedBy=$mofCreatedBy
@GenerationDate=$mofCreatedAt
@GenerationHost=$mofCreatedOn
*/

instance of MSFT_FileDirectoryConfiguration as `$MSFT_FileDirectoryConfiguration1ref
{
 ResourceID = "[File]TempDir";
 Type = "Directory";
 Ensure = "Present";
 DestinationPath = "$TempDirName";
 ModuleName = "PSDesiredStateConfiguration";
 SourceInfo = "C:\\ezsops\\devops\\StaticTestConfig.dsc.ps1::4::9::File";
 ModuleVersion = "1.0";
 ConfigurationName = "$NodeName";
};

instance of MSFT_FileDirectoryConfiguration as `$MSFT_FileDirectoryConfiguration2ref
{
 ResourceID = "[File]TempFile";
 Type = "File";
 Ensure = "Present";
 Contents = "$TempFileContent";
 DestinationPath = "$TempFileName";
 ModuleName = "PSDesiredStateConfiguration";
 SourceInfo = "C:\\ezsops\\devops\\StaticTestConfig.dsc.ps1::10::9::File";
 ModuleVersion = "1.0";
 DependsOn = {
    "[File]TempDir"};
    ConfigurationName = "$NodeName";
};

instance of OMI_ConfigurationDocument
{
 Version="2.0.0";
 MinimumCompatibleVersion = "1.0.0";
 CompatibleVersionAdditionalProperties= {"Omi_BaseResource:ConfigurationName"};
 Author="$mofCreatedBy";
 GenerationDate="$mofCreatedAt";
 GenerationHost="$mofCreatedOn";
 Name="$NodeName";
};

"@
}

Write-Output "All BASIC Tug Cmdlets are defined"
